#!/bin/bash

set -e

# To allow servers to disable this from taking effect if this would be dangerous
if test -r '/etc/default/postupdate-service-restart' -a -f '/etc/default/postupdate-service-restart'
then
    source '/etc/default/postupdate-service-restart'
else
    ACTION=true
fi

# Intended to be run from cron to check that all services have been restarted that need to be after an update.

nonefound="Found 0 processes using old versions of upgraded files"

checkrestartcommand='sudo checkrestart -b /usr/local/etc/checkrestart_blacklist'

# If the output indicates that checkrestart can do nothing then skip
ckrestart=$($checkrestartcommand)
if [[ $ckrestart == *"(0 distinct packages)"* ]]; then
	exit 0
fi
if [[ $ckrestart == *"$nonefound"* ]]; then
	exit 0
fi

# Disable doing anything on fragile servers
if [ "$ACTION" = true ]; then

### Special Cases

# Postgres and mysql are not handled by checkrestart so when it tells us it doesn't know what to do, just do it.
if [[ $ckrestart == *mysql* ]]; then
	echo "Triggering mysql restart"
	sudo service mysql restart
fi
if [[ $ckrestart == *postgresql* ]]; then
	echo "Triggering postgresql restart"
	sudo service postgresql restart
fi
# Restart java based things
if [[ $ckrestart == *openjdk* ]]; then
	echo "Need to restart some java"
	# Get the list of pids of java processes, perl puts the newlines back in
	pids=$(echo "$ckrestart" | perl -pe 's/(.*?)\s([0-9].*?)/\1\n \2/g' | sed 's|.*\s\+\([0-9]\+\)\s\+/usr/lib/jvm.*|\1|' | grep '^[0-9]*$')
	for pid in $pids; do
		if [[ -n "$pid" ]]; then
			username=$(getent passwd "$(grep Uid "/proc/$pid/status" | tr '[:space:]' ' ' | cut -d " " -f 2)" | cut -d ':' -f 1)
			if [[ $username == tomcat* ]] || [[ $username == sonar ]] || [[ $username == elasticsearch ]] || [[ $username == crucible ]] ; then
				echo "Triggering $username restart"
				sudo service "$username" restart
			fi
		fi
	done
fi

if [[ $ckrestart == */bin/sleep* ]] || [[ $ckrestart == */bin/login* ]] || [[ $ckrestart == */sbin/sulogin* ]] || [[ $ckrestart == */usr/bin/ssh-agent* ]] || [[ $ckrestart == */sbin/getty* ]] || [[ $ckrestart == */sbin/agetty* ]] || [[ $ckrestart == */sbin/mingetty* ]]; then
	echo "Need to restart sleep, login, ssh-agent or getty"
	# Get the list of pids of login and sleep processes, perl puts the newlines back in
	pids=$(echo "$ckrestart" | perl -pe 's/(.*?)\s([0-9].*?)/\1\n \2/g' | sed 's&.*\s\+\([0-9]\+\)\s\+\(\(/bin/login\)\|\(/sbin/sulogin\)\|\(/bin/sleep\)\|\(/usr/bin/ssh-agent\)\|\(/sbin/getty\)\|\(/sbin/agetty\)\|\(/sbin/mingetty\)\).*&\1&' | grep '^[0-9]*$')
	# These can safely be killed as login will respawn and sleep will just move something earlier (or in the case it occurs - monkeysphere - just be restarted)
	for pid in $pids; do
		echo "Killing: $(ps --pid "$pid" | tail -n 1)"
		sudo kill "$pid"
	done
fi

if [[ $ckrestart == */bin/bash* ]] ; then
	echo "Need to restart some bash"
	# Get the list of pids of bash processes, perl puts the newlines back in
	pids=$(echo "$ckrestart" | perl -pe 's/(.*?)\s([0-9].*?)/\1\n \2/g' | sed 's|.*\s\+\([0-9]\+\)\s\+/bin/bash.*|\1|' | grep '^[0-9]*$')
	for pid in $pids; do
		psout=$(ps --pid "$pid" | tail -n 1 | tr -s '[:space:]' ' ')
		if [[ $(echo "$psout" | cut -d ' ' -f 2) == 'hvc0' ]]; then
			echo "Killing hvc0 bash"
			sudo kill "$pid"
			break
		fi
		if [[ $(echo "$psout" | cut -d ' ' -f 4) == 'xe-daemon' ]]; then
			echo "Restarting xe-linux-distribution"
			sudo service xe-linux-distribution restart
		fi
	done
fi

if [[ $ckrestart == */sbin/dhclient* ]] ; then
	echo "need to restart dhclient"
	# Get the list of pids of bash processes, perl puts the newlines back in
	pids=$(echo "$ckrestart" | perl -pe 's/(.*?)\s([0-9].*?)/\1\n \2/g' | sed 's|.*\s\+\([0-9]\+\)\s\+/sbin/dhclient.*|\1|' | grep '^[0-9]*$')
	for pid in $pids; do
		echo "Killing dhclient and starting it"
		sudo kill "$pid"
		sudo dhclient
		break
	done
fi

if [[ $ckrestart == */usr/sbin/rpc.idmapd* ]] ; then
	echo "Need to restart rpd.idmapd"
	sudo service idmapd restart
fi

if [[ $ckrestart == */sbin/cgmanager* ]] ; then
	echo "Need to restart cgmanager"
	sudo service cgmanager restart
fi


### Automatic cases

# Try and automatically restart as much as we can
# When $nonefound exists it is the only line and so the rest does not execute.
services=$($checkrestartcommand | grep --line-regexp 'service [a-zA-Z0-9\.\-]* restart' | sed 's/service \([a-Z0-9\.\-]*\) restart/\1/')

if [ ! -z "$services" ]; then
	echo "Restarting services: $services"
fi

for service in $services; do sudo service "$service" restart; done

fi # End ACTION

# If there are still things left then this will output text which will be emailed by cron or displayed to the sysadmin

$checkrestartcommand | grep -v "$nonefound" || true # grep returns 1 if it finds nothing
